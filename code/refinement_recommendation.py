import openai
from typing import List, Dict


def refine_code(problem_description: str, failed_code: str, failure_localization: Dict, agent_logs: List[Dict],
                reference_solution: str) -> str:
    """
    Refines the failed code based on failure localization, agent contributions, and external knowledge.

    Args:
        problem_description (str): The description of the programming problem.
        failed_code (str): The erroneous code generated by the system.
        failure_localization (Dict): The responsibility of each agent for the failure.
        agent_logs (List[Dict]): Logs of the actions and decisions made by each agent.
        reference_solution (str): The reference solution to compare against.

    Returns:
        str: The refined code that fixes the issues and passes all test cases.
    """
    # Create a list of agents whose actions contributed significantly to the failure
    responsible_agents = [agent for agent, score in failure_localization.items() if score > 0]

    # Construct a detailed prompt for each responsible agent based on their contributions
    refinement_prompts = []
    for agent in responsible_agents:
        agent_log = next(log for log in agent_logs if log["agent"] == agent)
        action = agent_log["action"]
        message = agent_log["message"]
        role = agent_log["role"]

        # Create a role-specific prompt for refinement based on the failure
        prompt = create_refinement_prompt(agent, role, action, message, failed_code, reference_solution)
        refinement_prompts.append(prompt)

    # Generate counterfactual refinement suggestions by interacting with OpenAI
    refinement_suggestions = []
    for prompt in refinement_prompts:
        suggestion = reason_with_openai_for_refinement(prompt)
        refinement_suggestions.append(suggestion)

    # Apply the minimal changes suggested to fix the failed code
    refined_code = apply_refinement_suggestions(failed_code, refinement_suggestions)

    # Ensure the refined code satisfies all constraints and passes test cases
    validated_code = validate_refined_code(refined_code, problem_description, reference_solution)

    return validated_code


def create_refinement_prompt(agent_name: str, role: str, action: str, message: str, failed_code: str,
                             reference_solution: str) -> str:
    """
    Creates a detailed prompt for generating refinement suggestions based on the agent's role and actions.

    Args:
        agent_name (str): Name of the agent.
        role (str): Role of the agent (e.g., Product Manager, Architect, Engineer, QA Engineer).
        action (str): The action taken by the agent.
        message (str): The message provided by the agent.
        failed_code (str): The erroneous code.
        reference_solution (str): The reference solution to compare against.

    Returns:
        str: A prompt for generating refinement suggestions.
    """
    prompt = f"""
    You are a {role} responsible for a collaborative code generation task.
    The problem description is: "{problem_description}"
    The reference solution is:
    "{reference_solution}"
    The failed code is:
    "{failed_code}"

    Your action was: "{action}"
    Your message was: "{message}"

    Given that your action contributed to the failure, suggest the minimal change(s) required to fix the issue in the code. 
    Focus on the smallest change(s) necessary to make the code correct while maintaining the overall design and logic. 
    If the failure was due to a misunderstanding or incorrect approach, provide the corrective action.

    Be specific about what part of the code you suggest changing, and explain why it is necessary.
    """
    return prompt


def reason_with_openai_for_refinement(prompt: str) -> str:
    """
    Sends the constructed prompt to OpenAI for generating refinement suggestions and returns the response.

    Args:
        prompt (str): The prompt to be sent to OpenAI for generating refinement suggestions.

    Returns:
        str: The refinement suggestion received from OpenAI.
    """
    try:
        response = openai.Completion.create(
            engine="gpt-4",
            prompt=prompt,
            max_tokens=300,
            temperature=0.7
        )
        return response.choices[0].text.strip()
    except Exception as e:
        print(f"Error interacting with OpenAI: {e}")
        return "Error in refinement suggestion"


def apply_refinement_suggestions(failed_code: str, refinement_suggestions: List[str]) -> str:
    """
    Applies the refinement suggestions to the failed code.

    Args:
        failed_code (str): The original erroneous code.
        refinement_suggestions (List[str]): List of suggestions for refining the code.

    Returns:
        str: The refined code after applying the suggestions.
    """
    # Since suggestions are minimal changes, we can apply them incrementally to the failed code
    refined_code = failed_code
    for suggestion in refinement_suggestions:
        # Simple example: replace incorrect logic with suggested improvements
        refined_code = refined_code.replace("incorrect logic", suggestion)  # This is a placeholder
    return refined_code


def validate_refined_code(refined_code: str, problem_description: str, reference_solution: str) -> str:
    """
    Validates the refined code by comparing it with the reference solution.

    Args:
        refined_code (str): The refined code that needs to be validated.
        problem_description (str): The problem description for the task.
        reference_solution (str): The correct solution to compare against.

    Returns:
        str: The validated refined code if it passes all test cases, or an error message.
    """
    # For simplicity, assume we use a testing framework to validate the refined code
    # In practice, this could involve running the code against a set of test cases or a competitive programming platform API
    test_result = run_code_tests(refined_code, problem_description)

    if test_result == "PASS":
        return refined_code  # Code is valid, return refined code
    else:
        print(f"Refined code failed validation. Trying additional refinements.")
        # Attempt further refinements if validation fails
        return "Refinement failed. Additional changes needed."



